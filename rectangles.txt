/*
In the codespace:
1) Set tab to 2
2) Set the ruler to 78 in settings.json "editor.rulers": [78]
3) Install C/C++ extension
4) Install CodeLLDB
5) Program to execute is  "program": "${workspaceFolder}/main",
*/
#include <iostream>
#include <fstream>

using namespace std;

// TODO#1: Create Rectangle struct
struct Rectangle {
  double mLength;
  double mWidth;
};

// TODO#3: Write the function prototype for displayRectangle
void writeRectangle (const Rectangle &rsRectangle, ostream &outStream);
// TODO#6: Write the function prototype for readRectangle
bool readRectangle (Rectangle &rsRectangle, istream &inStream);
// TODO#9: Write the function prototype for reactangleArea
double rectangleArea (const Rectangle &rsRectangle);
// TODO@12: Write the prototype for readAllRectangles
int readAllRectangles (Rectangle sRectangles[], istream &inStream);
// TODO#15: Write the prototype for writeAllRectangles
void writeAllRectangles (const Rectangle sRectangles[], ostream &outStream, 
  int numRectangles);

int main () {
  const int MAX_RECTANGLES = 100;
  const string FILE_NAME = "rectangles.txt";
  Rectangle sRectangles[MAX_RECTANGLES];
  ifstream inStream;
  int numRectangles;

  // TODO#2: Declare a single struct with length 5.0 and width 10.0
  Rectangle sRectangle = {5.0, 10.0};

  cout << "Fun With Rectangles" << endl;

  // TODO#5: Call the function to output sRectangle to the screen
  writeRectangle (sRectangle, cout);
  cout << endl << endl;

  // TODO#8: Change the contents of sRectangle by calling readRectangle
  //          using the values 5.0 and 10.0 for length and width respectively.
  //          Prompt the user.
  cout << "Enter Rectangle length and width: ";
  readRectangle (sRectangle, cin);
  writeRectangle (sRectangle, cout);
  // TODO#11: Output the area
  cout << " Area = " << rectangleArea (sRectangle) << endl;

  inStream.open (FILE_NAME);
  if (inStream.fail ()) {
    cout << "Error Opening: " << FILE_NAME << endl;
    exit (1);
  }

  // TODO#14: Read all rectangles
  numRectangles = readAllRectangles (sRectangles, inStream);
  inStream.close ();

  // TODO#17: Write all rectangles
  writeAllRectangles (sRectangles, cout, numRectangles);

  cout << endl << endl;
  return EXIT_SUCCESS;
}

// TODO#4: Function definition for displayRectangle
void writeRectangle (const Rectangle &rsRectangle, ostream &outStream) {
  outStream << "length: " << rsRectangle.mLength 
    << " width: " << rsRectangle.mWidth;
}

// TODO#7: Function definition for readRectangle
bool readRectangle (Rectangle &rsRectangle, istream &inStream) {
  bool bIsEOF = true;

  if (inStream >> rsRectangle.mLength >> rsRectangle.mWidth) {
    bIsEOF = false;
  }
  return bIsEOF;
}

// TODO#10: Function definition for rectangleArea
double rectangleArea (const Rectangle &rsRectangle) {
  return rsRectangle.mLength * rsRectangle.mWidth;
}

// TODO#13: Function definition for readAllRectangles
//          NOTE: Call readRectangle in your solution
int readAllRectangles (Rectangle sRectangles[], istream &inStream) {
  int numRectangles = 0;
  Rectangle sRectangle;

  while (!readRectangle (sRectangle, inStream)) {
    sRectangles[numRectangles] = sRectangle;
    ++numRectangles;
  }
  return numRectangles;
}

// TODO#16: Function definition for writeAllRectangles
//          NOTE: Call writeRectangle in your solution
void writeAllRectangles (const Rectangle sRectangles[], ostream &outStream,
  int numRectangles) {

  for (int i = 0; i < numRectangles; ++i) {
    writeRectangle (sRectangles[i], outStream);
    outStream << " Area: " << rectangleArea (sRectangles[i]) << endl;
  }
}